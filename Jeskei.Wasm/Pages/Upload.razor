@page "/upload"
@inject IJSRuntime JS
@inject HttpClient Http
@using System.IO
@using Ipfs.Http
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Authorization
@inject IConfiguration Configuration

<h3>Upload Video</h3>

<AuthorizeView Roles="EthereumConnected">
    <Authorized>
        <input type="file" @ref="inputFile" />
        <button @onclick="UploadFile">Upload</button>
    </Authorized>
    <NotAuthorized>
        <div style="text-align: center; margin:50px; color:red; font-size: 16px;" class="text-primary;">
            Please connect to Ethereum!
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private ElementReference inputFile;

    private async Task UploadFile()
    {
        try
        {
            // Get the file using JS interop
            var file = await JS.InvokeAsync<IJSObjectReference>("uploadHelper.getFile", inputFile);
            if (file == null)
            {
                Console.WriteLine("No file selected.");
                return;
            }

            var fileName = await file.InvokeAsync<string>("name");
            var fileStream = await file.InvokeAsync<IJSStreamReference>("stream");

            // Create an IPFS client instance
            var ipfs = new IpfsClient("http://localhost:5001"); // Adjust the URL if needed

            // Read the file and upload it to IPFS
            using (var stream = await fileStream.OpenReadStreamAsync())
            {
                var node = await ipfs.FileSystem.AddAsync(stream, fileName);
                Console.WriteLine("File uploaded successfully!");
                Console.WriteLine("IPFS Hash (CID): " + node.Id);

                // Process the video
                await ProcessVideo(new Uri($"ipfs://{node.Id}"));

                Console.WriteLine("Uploaded: ");
                Console.WriteLine(node.Id);
            }

            
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred while uploading the file to IPFS: " + ex.Message);
        }
    }

    private async Task ProcessVideo(Uri videoUri)
    {
        var response = await Http.PostAsJsonAsync("api/media/process-video", videoUri);
        response.EnsureSuccessStatusCode();
    }
}
